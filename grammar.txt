statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement	: KEYWORD:RETURN expr?
			: KEYWORD:CONTINUE
			: KEYWORD:BREAK
            : KEYWORD:IMPORT STRING
            : try-stmnt
            : switch-stmnt
            : struct-def
			: expr

expr        : assign-expr
            : KEYWORD:CONST identifier EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

assign-expr : IDENTIFIER EQ expr
            : dot (LSQUARE expr RSQUARE)* EQ expr

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : index (LPAREN (expr (COMMA expr)*)? RPAREN)?

index       : dot (LSQUARE expr RSQUARE)*

dot         : atom (DOT identifier)*

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : dict-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def
            : do-expr
            : ns-expr
            : struct-expr

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

dict-expr   : LCURLY (expr COLON expr (COMMA expr COLON expr)*)? RCURLY

if-expr     : KEYWORD:IF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE
              statement
            | (NEWLINE statements KEYWORD:END)

for-expr    : for-expr-acc|for-in-expr

for-in-expr : KEYWORD:FOR IDENTIFIER KEYWORD:IN expr KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

for-expr-acc: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
              (KEYWORD:STEP expr)? KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUN IDENTIFIER?
              LPAREN (param (COMMA param)*)? RPAREN
              (ARROW expr)
            | (NEWLINE statements KEYWORD:END)

param       : IDENTIFIER (EQ expr)? (KEYWORD:FROM expr)

do-expr     : KEYWORD:DO statements KEYWORD:END

struct-expr : identifier LCURLY RCURLY

try-stmnt   : KEYWORD:TRY statements KEYWORD:CATCH KEYWORD:AS identifier 
              (KEYWORD:THEN statement)
            | (NEWLINE statements KEYWORD:END)

switch-stmnt: KEYWORD:SWITCH expr NEWLINE (KEYWORD:CASE expr NEWLINE statements)* (ELSE statements)? END

ns-expr     : KEYWORD:NAMESPACE identifier? NEWLINE statements KEYWORD:END

// NOTE: newlines ommited
struct-def  : KEYWORD:STRUCT identifier identifier* KEYWORD:END
